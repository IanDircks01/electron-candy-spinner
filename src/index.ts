import { app, BrowserWindow, globalShortcut, dialog, ipcMain } from 'electron';
import { SlotConfig, SpinInfo, Symbol } from './types';
import fs from 'fs';
import path from 'path';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const CLI_ARGS = process.argv.splice(2);
const DEV_MODE = !(CLI_ARGS.find((arg) => arg.toLocaleLowerCase() == 'dev') == undefined);
const CONFIG_FILE_PATH = path.join(app.getPath('userData'), 'slot.config.json');

let configData: SlotConfig | null = null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 1080,
    width: 1920,
    fullscreen: !DEV_MODE,
    titleBarStyle: DEV_MODE ? 'default' : 'hidden',
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      devTools: DEV_MODE
    },
  });

  const spin = (): void => {
    mainWindow.webContents.send('spin-info', generateSpin());
  };

  globalShortcut.register('S', () => {
    spin();
  });

  globalShortcut.register('1', () => {
    // Desponse 2 candy
  });

  globalShortcut.register('2', () => {
    // Gamble for up to 10
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  ipcMain.on('ready', (event) => {
    mainWindow.webContents.send('init', {symbols: configData.symbols, reelCount: configData.cfg.reels});
    mainWindow.webContents.send('spin-info', {
      combo: [
        {
          "name": "🍎",
          "value": 1
      },
      {
          "name": "🍎",
          "value": 1
      },
      {
          "name": "🍎",
          "value": 1
      }
      ],
      reward: 3
    });
  });  

  // Open the DevTools.
  if (DEV_MODE) mainWindow.webContents.openDevTools();
};

const generateSpin = (): SpinInfo => {
  const reelCount = configData.cfg.reels;
  const symbolCount = configData.symbols.length;

  var resComb: Symbol[] = [];
  var score: number = 0;

  for (var i = 0; i < reelCount; i++) {
    resComb.push(configData.symbols[Math.floor(Math.random() * symbolCount)]);
  }

  configData.symbols.some((sym) => {
    const matches = resComb.filter((c) => c.name == sym.name);

    if (matches.length == 3) {
      resComb.forEach((c) => {
        score += c.value;
      });

      return true;
    } else if (matches.length == 2) {
      const wildMatch = resComb.filter((c) => c.name == "Wild");

      if (wildMatch.length != 0) {
        resComb.forEach((c) => {
          score += c.value;
        });
      } else {
        matches.forEach((c) => {
          score += c.value;
        });
      }

      return true;
    } else {
      return false;
    }
  });

  return {
    combo: resComb,
    reward: score
  };
};

app.on('ready', () => {

  try {
    configData = JSON.parse(fs.readFileSync(CONFIG_FILE_PATH, 'utf-8'));
  } catch (err) {
    console.error(err);
    dialog.showErrorBox('Config Read Error', `Unable to read config file (slot.config.json) from location (${app.getPath('userData')})`);
    app.exit();
    return;
  }

  globalShortcut.register('Esc', () => {
    app.quit();
  });

  globalShortcut.register('R', () => {
    app.relaunch();
    app.quit();
  });

  createWindow();
});

app.on('will-quit', () => {
  globalShortcut.unregisterAll();
});